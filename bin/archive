#!/usr/bin/env ruby

require 'json'
require 'fileutils'

appmap_dir_env = ENV['APPMAP_DIR'] or raise "Missing env var: APPMAP_DIR"
project_name = ENV['PROJECT_NAME'] or raise "Missing env var: PROJECT_NAME"

appmap_dir = [ project_name, appmap_dir_env ].join('/')
scanner_results_filename = "#{project_name}.scanner.json"

raise "AppMap dir #{appmap_dir} is empty" unless File.exists?(appmap_dir)
raise "#{scanner_results_filename} is missing" unless File.exists?(scanner_results_filename)

FileUtils.rm_rf 'tmp/archive'
FileUtils.mkdir_p 'tmp/archive'
FileUtils.cp scanner_results_filename, 'tmp/archive/'

JSON.parse(File.read(scanner_results_filename)).each do |finding|
  tokens = finding['appMapFile'].split('/')
  tokens.pop
  dir = [ 'tmp/archive', tokens.join('/') ].join('/')
  FileUtils.mkdir_p dir
  FileUtils.cp finding['appMapFile'], dir
end

FileUtils.rm_rf 'archive'
FileUtils.mkdir_p 'archive'
Dir.chdir 'tmp/archive' do
  system "tar czf ../../archive/#{project_name}.findings.tgz ."
end

Dir.chdir project_name do
  system "tar czf ../archive/#{project_name}.appmaps.tgz #{appmap_dir_env}"
end
